package Lesson.LessonFour;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;

/**
 * Main
 */
public class Main {

    public static void main(String[] args) {
        /*
         * Двусвязный список: LinkedList
         * Характерезуется тем, что первый элемент ссылается на второй, а второй на
         * предыдущий, и на следующий. Таким образом формируется дву-связання цепочка
         * элементов. Где кадый элеменрт знает положение следующего и предыдущего.
         * Но при этом, изначально, известно только положение первого и последнего
         * элемента списка.
         * Т.е. если нужен условый пятый эомент из 1000.
         * То что бы до него добраться, необходимо пройти по цепочке ссылок от певрого
         * элемента. И ни как иначе. т.е. обращение по индексу, как у массива,
         * ннепорседвенно сразу к элементу не возможно.
         */
        LinkedList<Integer> ll = new LinkedList<>();
        ll.add(5);
        /*
         * Список очередь: Queue
         * Характерезуется тем, что обработка элементов списка происходит с первых
         * элементов (тех что были добавлены первыми.)
         */
        Queue<Integer> queue = new LinkedList<>();
        queue.add(1);
        queue.add(12);
        queue.add(54);
        queue.remove(); // Удалён будет первый элемент.
        /*
         * Приритеная очередь: PriorityQueue
         * Характерезуется тем, что обработака элементов списка происходит по принцицу:
         * от меньшего к большему. Удобно для работы с числами или строками, но на этом
         * всё.
         */
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        pq.add(23);
        pq.add(62);
        pq.add(11);
        pq.poll(); // Взят будет 3-й - наименьший элемент.
        /*
         * Двуконецчный список: Deque
         * Характерезуется тем, что можно орабатывать элементы как с начала списка (с
         * первого элемента), так и с конца (с последнего элемента).
         * Чем отличается от двусвязного списка?
         * Никак нельзя добавить в середину?
         */
        Deque<Integer> deque = new ArrayDeque<>();
        deque.addFirst(1); // Добавление в начало.
        deque.addLast(5); // Добавление в конец.

        /*
         * Список Стэк: Stack
         * Характерезуется тем, что последний добавленый элемент обрабатывается первым.
         * По сути, это PriorityQueue на оборот. То что записывается в лист первым -
         * обрабатывается последним.
         */
        Stack<Integer> st = new Stack<>();
        st.push(24); // добавление элемента.
        st.push(55);
        st.push(123);
        int num = st.pop(); // взят будет последний элемент.

    }
}